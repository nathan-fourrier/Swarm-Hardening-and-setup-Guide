stages:
  - build
  - deploy

.build_docker:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"

  script:
    - echo 'Running on branch "$CI_COMMIT_BRANCH" with tag = $tag'
    - docker pull "$CI_REGISTRY_IMAGE${tag}" || true
    - cat "$DEV_ENV_FILE" > .env 
    - docker build -t "$CI_REGISTRY_IMAGE${tag}" .

  after_script:
    - |
      if [ "$tag" != "" ]; then
        docker save -o $CI_PROJECT_NAME:$CI_COMMIT_REF_SLUG.tar "$CI_REGISTRY_IMAGE${tag}"
        docker push "$CI_REGISTRY_IMAGE${tag}"
        echo "Image ${tag} saved"
      fi
  when: manual

.deploy_docker:
  stage: deploy
  image: docker:latest
  when: manual
  allow_failure: true
  needs: []

  before_script:
    - apk add --no-cache openssh
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    - cp "$VPS_SSH_KNOWN_HOSTS" /etc/ssh/ssh_known_hosts
    - chmod 644 /etc/ssh/ssh_known_hosts

    - eval $(ssh-agent -s)
    - chmod 400 "$VPS_SSH_PRIVATE_KEY"
    - ssh-add "$VPS_SSH_PRIVATE_KEY"

    - ssh -f -N -L 2376:127.0.0.1:2376 "$VPS_SSH_USER@$VPS_IP"
    - sleep 4
    - nc -z 127.0.0.1 2376 || (echo "‚ùå SSH tunnel to Docker TLS inactive" && exit 1)

  script:
    - |
      docker --tlsverify \
        --tlscacert="$DOCKER_SWARM_CA" \
        --tlscert="$RUNNER_DOCKER_CERT" \
        --tlskey="$RUNNER_DOCKER_CERT_KEY" \
        -H tcp://127.0.0.1:2376 \
        stack deploy --with-registry-auth -c "$STACK_FILE" "$STACK_NAME"
    
    - pkill -f "ssh.*-L 2376:127.0.0.1:2376"